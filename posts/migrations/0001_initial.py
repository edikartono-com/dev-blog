# Generated by Django 3.2.10 on 2022-02-04 18:22

import os
import ckeditor_uploader.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models, transaction, IntegrityError
import django.db.models.deletion
import imagekit.models.fields
import posts.models
import taggit.managers
import uuid

fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))
fixture_filename = 'initial_data.json'

def load_fixtures(*args):
    from django.core import serializers
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    fixture = open(fixture_file, 'rb')
    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
    try:
        with transaction.atomic():
            for obj in objects:
                obj.save()
    except IntegrityError:
        pass
    fixture.close()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('corecode', '0001_initial'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='page/%Y-%m')),
                ('summary', models.TextField(blank=True, help_text='Ringkasan, max 200 karakter', null=True, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('body', ckeditor_uploader.fields.RichTextUploadingField()),
                ('create', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('visible', models.BooleanField(default=False, help_text='Ditampilkan di footer menu?')),
            ],
        ),
        migrations.CreateModel(
            name='Terms',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('desc', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('visible_menu', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=120, unique=True)),
                ('image', imagekit.models.fields.ProcessedImageField(upload_to=posts.models.upload_to_path)),
                ('summary', models.TextField(validators=[django.core.validators.MaxLengthValidator(200)])),
                ('body', ckeditor_uploader.fields.RichTextUploadingField()),
                ('create', models.DateTimeField(auto_now_add=True)),
                ('update', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRF', 'Draft'), ('PBL', 'Publish'), ('DEL', 'Hapus')], default='PBL', max_length=3)),
                ('slug', models.SlugField(blank=True, help_text='Teks dan tanda (-), jika dikosongkan otomatis diambil dari title', null=True, unique=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='corecode.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='posts.terms', to_field='slug')),
            ],
            options={
                'verbose_name_plural': 'Blog Content',
                'ordering': ['-create'],
            },
        ),
        migrations.RunPython(load_fixtures)
    ]
