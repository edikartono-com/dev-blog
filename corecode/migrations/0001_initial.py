# Generated by Django 3.2.10 on 2022-03-24 05:24

import os
import ckeditor_uploader.fields
import corecode.models
import django.core.validators
from django.db import migrations, models, transaction, IntegrityError
import django.db.models.deletion
import imagekit.models.fields
import uuid

fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))
fixture_filename = 'initial_data.json'

def load_fixtures(*args):
    from django.core import serializers
    fixture_file = os.path.join(fixture_dir, fixture_filename)
    fixture = open(fixture_file, 'rb')
    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)
    try:
        with transaction.atomic():
            for obj in objects:
                obj.save()
    except IntegrityError:
        pass
    fixture.close()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='CounterSec',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True)),
                ('countd', models.IntegerField()),
                ('icon', models.CharField(max_length=75)),
            ],
            options={
                'verbose_name_plural': 'Counter Section',
            },
        ),
        migrations.CreateModel(
            name='Featured',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('body', models.TextField(validators=[django.core.validators.MaxLengthValidator(200)])),
                ('icon_name', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Intro',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nama website', max_length=75)),
                ('desc', models.TextField(help_text='Deskripsi singkat web, max 175 karakter', validators=[django.core.validators.MaxLengthValidator(175)])),
                ('intro', models.CharField(help_text='Intro muncul di HomePage', max_length=255)),
                ('subtitle', models.CharField(help_text='Teks berjalan di HomePage, pisahkan dengan koma', max_length=255)),
                ('bg_image', imagekit.models.fields.ProcessedImageField(upload_to='inline-image/')),
            ],
        ),
        migrations.CreateModel(
            name='Portofolio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=100, unique=True)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
                ('source', models.URLField(blank=True, null=True)),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to=corecode.models.upload_to_path)),
                ('youtube_video', models.URLField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, help_text='Teks dan tanda (-), jika dikosongkan otomatis diambil dari project_name', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Poster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('body', models.TextField()),
                ('image', imagekit.models.fields.ProcessedImageField(upload_to='poster/%Y-%m')),
                ('info', models.TextField()),
                ('other', models.CharField(default='Skill', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corecode_uuidtaggeditem_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corecode_uuidtaggeditem_items', to='taggit.tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('value', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('poster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.poster')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('body', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(175)])),
                ('icon', models.CharField(max_length=75)),
                ('link', models.URLField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('title', 'link')},
            },
        ),
        migrations.RunPython(load_fixtures)
    ]
